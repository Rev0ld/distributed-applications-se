{
  "openapi": "3.1.0",
  "info": {
    "title": "VideoLibrary API",
    "description": "An ASP.NET Core Web API for managing videos in a BLOB storage \n\n Use https://editor-next.swagger.io/ when checking the documentation since its writen in version 3.1.0",

    "version": "v1"
  },
  "tags": [
    {
      "name": "Authors",
      "description": "Methods for working with the Authors table"
    },
    {
      "name": "Copyrights",
      "description": "Methods for working with the Copyrights table"
    },
    {
      "name": "Formats",
      "description": "Methods for working with the Formats table"
    },
    {
      "name": "Genres",
      "description": "Methods for working with the Genres table"
    },
    {
      "name": "Tags",
      "description": "Methods for working with the Tags table"
    },
    {
      "name": "Video",
      "description": "Methods for working with the Video table "
    },
    {
      "name": "Video-Authors",
      "description": "Methods for working with the Video table and the M2M table connecting Authors to Videos"
    },
    {
      "name": "Video-Genres",
      "description": "Methods for working with the Video table and the M2M table connecting Genres to Videos"
    },
    {
      "name": "Video-Tags",
      "description": "Methods for working with the Video table and the M2M table connecting Tag to Videos"
    }

  ],
  "paths": {
    "/api/Authors/Get": {
      "post": {
        "tags": [
          "Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Authors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorsAuthorFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorsAuthorFilterIMIndexIM"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authors": {
      "post": {
        "tags": [
          "Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Author",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "type": "string",
                      "examples": [ "Jhon" ]
                    },
                    "middleName": {
                      "type": "string",
                      "examples": [ "Bon" ]
                    },
                    "lastName": {
                      "type": "string",
                      "examples": [ "Jovi" ]
                    },
                    "biography": {
                      "type": "string",
                      "examples": [ "Short Bio: Lorem ipsum dolor sit amet...I" ]
                    },
                    "id": {
                      "type": "integer",
                      "examples": [ 4001 ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: one or more fields are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "examples": [ "One or more validation errors occurred." ]
                    },
                    "status": {
                      "type": "integer",
                      "examples": [ 400 ]
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "LastName": [ "This field is Required" ],
                        "Biography": [ "This field is Required" ],
                        "FirstName": [ "This field is Required" ],
                        "MiddleName": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "examples": [ "00-81437dff9ead2a366351e5daa440298c-391faf6c3c5f7fd8-00" ]
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/Authors/{authorId}": {
      "get": {
        "summary": "Get a single Author by ID",
        "description": "Retrieves a specific entity by its unique identifier.",
        "tags": [ "Authors" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the author to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Authors"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Entity with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Author",
        "parameters": [
          {
            "name": "authorId",
            "description": "The id of the author to update",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 100
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "middleName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "biography": {
                          "type": "string",
                          "example": "Author Updated"
                        }
                      }
                    },
                    "old": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 100
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "middleName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Author Updated"
                        },
                        "biography": {
                          "type": "string",
                          "example": "Author Updated"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: one or more fields are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "description": "Field-specific validation messages",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "LastName": [ "This field is Required" ],
                        "Biography": [ "This field is Required" ],
                        "FirstName": [ "This field is Required" ],
                        "MiddleName": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-08595c70dda21ebe26fbed2eb531fe33-fb25e325e88e9bf6-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Author",
        "parameters": [
          {
            "name": "authorId",
            "description": "The id of the author to delete",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "videos": {
                      "type": "array",
                      "items": {},
                      "example": []
                    },
                    "lazyLoader": {
                      "type": "object",
                      "example": {}
                    },
                    "firstName": {
                      "type": "string",
                      "example": "Author 2 Added"
                    },
                    "middleName": {
                      "type": "string",
                      "example": "Author 2 Added"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "Author 2 Added"
                    },
                    "biography": {
                      "type": "string",
                      "example": "Author 2 Added"
                    },
                    "id": {
                      "type": "integer",
                      "example": 4003
                    }
                  },
                  "required": [ "firstName", "middleName", "lastName", "biography", "id", "videos", "lazyLoader" ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-599b022daa7b357382ddb2cb44ab2d4b-f9715d5c677d465b-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },


    "/api/Copyrights/Get": {
      "post": {
        "tags": [
          "Copyrights"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Copyrights",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyrightsCopyrightFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyrightsCopyrightFilterIMIndexIM"
                }
              }
            }
          }
        }
      }
    },
    "/api/Copyrights": {
      "post": {
        "tags": [
          "Copyrights"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Copyright",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyrigtIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Copyright entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "TestAdded"
                    },
                    "shorttName": {
                      "type": "string",
                      "example": "TestAdded"
                    },
                    "description": {
                      "type": "string",
                      "example": "TestAdded"
                    },
                    "id": {
                      "type": "integer",
                      "example": 2001
                    }
                  },
                  "required": [ "name", "shortName", "description", "id" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: one or more fields are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [ "This field is Required" ],
                        "shortName": [ "This field is Required" ],
                        "description": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-c13063a7a43115fd4a000aebff1022ed-39b68c68879af4cf-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }

        }
      }
    },
    "/api/Copyrights/{id}": {
      "get": {
        "summary": "Get a single copyright by ID",
        "description": "Retrieves a specific copyright by the ID.",
        "tags": [ "Copyrights" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the copyright to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Copyright found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Copyrights"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Author not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Author with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Copyrights"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Copyright",
        "parameters": [
          {
            "name": "id",
            "description": "The id of the copyright to update",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyrigtIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 6
                        },
                        "name": {
                          "type": "string",
                          "example": "Updated"
                        },
                        "shortName": {
                          "type": "string",
                          "example": "Updated"
                        },
                        "description": {
                          "type": "string",
                          "example": "Updated"
                        }
                      },
                      "required": [ "id", "name", "shortName", "description" ]
                    },
                    "old": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 6
                        },
                        "name": {
                          "type": "string",
                          "example": "Updated"
                        },
                        "shortName": {
                          "type": "string",
                          "example": "Updated"
                        },
                        "description": {
                          "type": "string",
                          "example": "Updated"
                        }
                      },
                      "required": [ "id", "name", "shortName", "description" ]
                    }
                  },
                  "required": [ "success", "updated", "old" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: one or more fields are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [ "This field is Required" ],
                        "shortName": [ "This field is Required" ],
                        "description": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-2ab5e829e9c23e5255058d9acc2de105-aa8d0ef58cc8bd57-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Copyrights"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Copyright",
        "parameters": [
          {
            "name": "id",
            "description": "The id of the Copyright to delete",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Copyright information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lazyLoader": {
                      "type": "object",
                      "example": {}
                    },
                    "name": {
                      "type": "string",
                      "example": "CC BY-NC-ND"
                    },
                    "shortName": {
                      "type": "string",
                      "example": "CC BY"
                    },
                    "description": {
                      "type": "string",
                      "example": "Creative Commons Attribution-NonCommercial-NoDerivs License"
                    },
                    "id": {
                      "type": "integer",
                      "example": 2000
                    }
                  },
                  "required": [ "lazyLoader", "name", "shortName", "description", "id" ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-8a10f16e6bb830c9c2684458c6283c3a-4190fa51b428f9fa-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },

    "/api/Formats/Get": {
      "post": {
        "tags": [
          "Formats"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Formats",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatsFormatFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatsFormatFilterIMIndexIM"
                }
              }
            }
          }
        }
      }
    },
    "/api/Formats": {
      "post": {
        "tags": [
          "Formats"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Format",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video format information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "Format 2 Added"
                    },
                    "extension": {
                      "type": "string",
                      "example": "Format 2 Added"
                    },
                    "isPhysical": {
                      "type": "boolean",
                      "example": false
                    },
                    "id": {
                      "type": "integer",
                      "example": 2001
                    }
                  },
                  "required": [ "type", "extension", "isPhysical", "id" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: missing or invalid fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "Type": [ "This field is Required" ],
                        "Extension": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-650c2a568da3622851d6e6b8a8c21ad1-aad91d587bd7356a-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }

        }
      }
    },
    "/api/Formats/{id}": {
      "get": {
        "summary": "Get a single format by ID",
        "description": "Retrieves a specific format by their ID.",
        "tags": [ "Formats" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the author to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Author found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Formats"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Author not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Author with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Formats"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Format updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Format Updated1233"
                        },
                        "extension": {
                          "type": "string",
                          "example": "Format Updated1233"
                        },
                        "isPhysical": {
                          "type": "boolean",
                          "example": false
                        },
                        "id": {
                          "type": "integer",
                          "example": 100
                        }
                      },
                      "required": [ "type", "extension", "isPhysical", "id" ]
                    }
                  },
                  "required": [ "success", "updated" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: required fields are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "Type": [ "This field is Required" ],
                        "Extension": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-6bb8ed0b3c6f5971458772eacaaeffaa-642869abfb546017-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Formats"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Format retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lazyLoader": {
                      "type": "object",
                      "description": "Lazy loading placeholder",
                      "example": {}
                    },
                    "type": {
                      "type": "string",
                      "example": "Format To Delete"
                    },
                    "extension": {
                      "type": "string",
                      "example": "Format To Delete"
                    },
                    "id": {
                      "type": "integer",
                      "example": 200
                    }
                  },
                  "required": [ "type", "extension", "id" ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-c992cb509efb3098067c91aa95986969-aa11e6b7b9b4a9fd-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },

    "/api/Genres/Get": {
      "post": {
        "tags": [
          "Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Genres",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenresGenreFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Genres": {
      "post": {
        "tags": [
          "Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Genre",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Genre created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Genre 2 Added"
                    },
                    "description": {
                      "type": "string",
                      "example": "Genre 2 Added"
                    },
                    "id": {
                      "type": "integer",
                      "example": 2001
                    }
                  },
                  "required": [ "name", "description", "id" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: required fields are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [ "This field is Required" ],
                        "description": [ "This field is Required" ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-81df894ffb62db1ca3d15b3963431d88-5bb74da772af7e15-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/Genres/{id}": {
      "get": {
        "summary": "Get a single genre by ID",
        "description": "Retrieves a specific genre by their ID.",
        "tags": [ "Genres" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the genre to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genre found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Genres"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Genre not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Author with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Genre",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Genre updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Genre Name 2 update"
                        },
                        "description": {
                          "type": "string",
                          "example": "Description 2 update"
                        },
                        "id": {
                          "type": "integer",
                          "example": 2
                        }
                      },
                      "required": [ "name", "description", "id" ]
                    }
                  },
                  "required": [ "success", "updated" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: required fields are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [
                          "This field is Required"
                        ],
                        "description": [
                          "This field is Required"
                        ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-e7aa812b90a4ef7f5f40b837681208a0-941f3bb22d9e0616-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Genre",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genre retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lazyLoader": {
                      "type": "object",
                      "description": "Lazy loading placeholder",
                      "example": {}
                    },
                    "name": {
                      "type": "string",
                      "example": "Genre To Delete"
                    },
                    "description": {
                      "type": "string",
                      "example": "Genre To Delete"
                    },
                    "id": {
                      "type": "integer",
                      "example": 200
                    }
                  },
                  "required": [ "name", "description", "id" ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-4a317db71ab37fcfac68c02bf5c5452c-3472281bc8365a9c-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },

    "/api/Tags/Get": {
      "post": {
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Tags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsTagFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Tag 3"
                    },
                    "description": {
                      "type": "string",
                      "example": "Tag 3"
                    },
                    "id": {
                      "type": "integer",
                      "example": 2001
                    }
                  },
                  "required": [ "name", "description", "id" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: required fields are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [
                          "This field is Required"
                        ],
                        "description": [
                          "This field is Required"
                        ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-9b36fb499e6c294f2ab2e4874c8e4f74-70403dc7339d2bd5-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/Tags/{id}": {
      "get": {
        "summary": "Get a single tag by ID",
        "description": "Retrieves a specific tag by their unique identifier.",
        "tags": [ "Tags" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the tag to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tags"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Tag with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Tag Updated"
                        },
                        "description": {
                          "type": "string",
                          "example": "Tag Updated"
                        },
                        "id": {
                          "type": "integer",
                          "example": 200
                        }
                      },
                      "required": [ "name", "description", "id" ]
                    }
                  },
                  "required": [ "success", "updated" ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error: required fields are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "name": [
                          "This field is Required"
                        ],
                        "description": [
                          "This field is Required"
                        ]
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-c10a381d5b9f1549252702673f0fe8f6-ffcffee1bdc5bc34-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lazyLoader": {
                      "type": "object",
                      "description": "Lazy loading placeholder",
                      "example": {}
                    },
                    "name": {
                      "type": "string",
                      "example": "Tag Updated"
                    },
                    "description": {
                      "type": "string",
                      "example": "Tag Updated"
                    },
                    "id": {
                      "type": "integer",
                      "example": 200
                    }
                  },
                  "required": [ "name", "description", "id" ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-dd191d652ab0e5537bf9a3aee8967295-6a63826bbbc3d6da-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/Video/Get": {
      "post": {
        "tags": [
          "Video"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Videos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideosVideoFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Video": {
      "post": {
        "tags": [
          "Video"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Creates a new Video",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "fileLocation": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "fileID": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "formatId": {
                      "type": "integer",
                      "example": 8
                    },
                    "format": {
                      "type": [ "string", "null" ],
                      "nullable": true,
                      "example": null
                    },
                    "size": {
                      "type": "integer",
                      "example": 10
                    },
                    "description": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "yearOfPublishing": {
                      "type": "string",
                      "format": "date-time",
                      "example": "1980-01-01T00:00:00Z"
                    },
                    "copyrightId": {
                      "type": "integer",
                      "example": 6
                    },
                    "copyright": {
                      "type": [ "string", "null" ],
                      "nullable": true,
                      "example": null
                    },
                    "id": {
                      "type": "integer",
                      "example": 6
                    }
                  },
                  "required": [
                    "title",
                    "fileLocation",
                    "fileID",
                    "formatId",
                    "size",
                    "description",
                    "yearOfPublishing",
                    "copyrightId",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One or more validation errors occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "Title": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        },
                        "CopyrightId": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "The field CopyrightId must be between 1 and 6." ]
                        },
                        "Description": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        },
                        "FileLocation": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        }
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-825bb4134c7fae6a27e3921d6e792542-3630ef2fadf1076b-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/Video/{id}": {
      "get": {
        "summary": "Get a single video by ID",
        "description": "Retrieves a specific genre by their unique identifier.",
        "tags": [ "Video" ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Numeric ID of the video to retrieve",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Videos"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Genre not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Video with ID 123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Video"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Updates a specified Video",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "example": "Vid Test Add"
                        },
                        "fileLocation": {
                          "type": "string",
                          "example": "Vid Test Add"
                        },
                        "formatId": {
                          "type": "integer",
                          "example": 8
                        },
                        "format": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "MKV"
                            },
                            "extension": {
                              "type": "string",
                              "example": "Format 1"
                            },
                            "id": {
                              "type": "integer",
                              "example": 8
                            }
                          }
                        },
                        "size": {
                          "type": "integer",
                          "example": 10
                        },
                        "description": {
                          "type": "string",
                          "example": "Vid Test Add"
                        },
                        "yearOfPublishing": {
                          "type": "string",
                          "format": "date-time",
                          "example": "1980-01-01T00:00:00"
                        },
                        "copyrightId": {
                          "type": "integer",
                          "example": 6
                        },
                        "copyright": {
                          "type": "object",
                          "properties": {
                            "copyrightName": {
                              "type": "string",
                              "example": "Updated"
                            },
                            "copyrightDescription": {
                              "type": "string",
                              "example": "Updated"
                            },
                            "id": {
                              "type": "integer",
                              "example": 6
                            }
                          }
                        },
                        "id": {
                          "type": "integer",
                          "example": 1
                        }
                      },
                      "required": [ "title", "fileLocation", "formatId", "format", "size", "description", "yearOfPublishing", "copyrightId", "copyright", "id" ]
                    }
                  },
                  "required": [ "success", "updated" ]
                }
              }
            }
          },
          "400": {
            "description": "One or more validation errors occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "One or more validation errors occurred."
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "Title": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        },
                        "Description": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        },
                        "FileLocation": {
                          "type": "array",
                          "items": { "type": "string" },
                          "example": [ "This field is Required" ]
                        }
                      }
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-b8936b718dbb34a2fc21652b3290e97d-0172645c91c88544-00"
                    }
                  },
                  "required": [ "title", "status", "errors", "traceId" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Video"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Deletes a specified Video",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update with related entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "format": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "MKV"
                            },
                            "extension": {
                              "type": "string",
                              "example": "Format 1"
                            },
                            "id": {
                              "type": "integer",
                              "example": 8
                            }
                          }
                        },
                        { "type": "null" }
                      ]
                    },
                    "copyright": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "copyrightName": {
                              "type": "string",
                              "example": "Updated"
                            },
                            "copyrightDescription": {
                              "type": "string",
                              "example": "Updated"
                            },
                            "id": {
                              "type": "integer",
                              "example": 6
                            }
                          }
                        },
                        { "type": "null" }
                      ]
                    },
                    "authors": {
                      "type": "array",
                      "items": { "type": "object" },
                      "example": []
                    },
                    "tags": {
                      "type": "array",
                      "items": { "type": "object" },
                      "example": []
                    },
                    "genres": {
                      "type": "array",
                      "items": { "type": "object" },
                      "example": []
                    },
                    "lazyLoader": {
                      "type": "object",
                      "example": {}
                    },
                    "title": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "fileLocation": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "formatId": {
                      "type": "integer",
                      "example": 8
                    },
                    "size": {
                      "type": "integer",
                      "example": 10
                    },
                    "description": {
                      "type": "string",
                      "example": "Vid Test Add"
                    },
                    "yearOfPublishing": {
                      "type": "string",
                      "format": "date-time",
                      "example": "1980-01-01T00:00:00"
                    },
                    "copyrightId": {
                      "type": "integer",
                      "example": 6
                    },
                    "id": {
                      "type": "integer",
                      "example": 1
                    }
                  },
                  "required": [
                    "format",
                    "copyright",
                    "authors",
                    "tags",
                    "genres",
                    "lazyLoader",
                    "title",
                    "fileLocation",
                    "formatId",
                    "size",
                    "description",
                    "yearOfPublishing",
                    "copyrightId",
                    "id"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "traceId": {
                      "type": "string",
                      "example": "00-b596af2ee609af616d6aef0a4657323f-fd9a802b9c297b58-00"
                    }
                  },
                  "required": [ "title", "status", "traceId" ]
                }
              }
            }
          }
        }
      }
    },

    "/api/Video/get/author/{videoId}": {
      "post": {
        "tags": [
          "Video-Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Authors with connection with the specified video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "description": "ID of the video",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorVideoAuthorFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Video/author/{videoId}": {
      "post": {
        "tags": [
          "Video-Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Adds an Author to the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success with author-video link data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authorId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "author": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 6
                        }
                      },
                      "required": [ "authorId", "videoId", "author", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request – input parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in input params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }

        }
      },
      "delete": {
        "tags": [
          "Video-Authors"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Removes an Author from the specified video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with author-video link data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authorId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "author": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 7
                        }
                      },
                      "required": [ "authorId", "videoId", "author", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in input params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }



        }
      }
    },

    "/api/Video/get/genre/{videoId}": {
      "post": {
        "tags": [
          "Video-Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Genres with connection with the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagVideoGenreFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Video/genre/{videoId}": {
      "post": {
        "tags": [
          "Video-Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Adds a Genre to the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with genre-video link data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "genreId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "genre": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 9
                        }
                      },
                      "required": [ "genreId", "videoId", "genre", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in input params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Video-Genres"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Removes a Genre from the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with genre-video link data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "genreId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "genre": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 9
                        }
                      },
                      "required": [ "genreId", "videoId", "genre", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in input params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }
        }
      }
    },

    "/api/Video/get/tag/{videoId}": {
      "post": {
        "tags": [
          "Video-Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Gets a list of Tags with connection with the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagVideoTagFilterIMIndexIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Video/tag/{videoId}": {
      "post": {
        "tags": [
          "Video-Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Adds a Tag to the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with tag-video link data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tagId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "tag": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 8
                        }
                      },
                      "required": [ "tagId", "videoId", "tag", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in input params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }

        }
      },
      "delete": {
        "tags": [
          "Video-Tags"
        ],
        "security": [
          {
            "EntraID": []
          }
        ],
        "summary": "Removes a Tag from the specified Video",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagVideoIM"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with tag-video association",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tagId": {
                          "type": "integer",
                          "example": 1
                        },
                        "videoId": {
                          "type": "integer",
                          "example": 2
                        },
                        "tag": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "video": {
                          "nullable": true,
                          "type": [ "object", "null" ],
                          "example": null
                        },
                        "id": {
                          "type": "integer",
                          "example": 3
                        }
                      },
                      "required": [ "tagId", "videoId", "tag", "video", "id" ]
                    }
                  },
                  "required": [ "success", "data" ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Error in imput params!"
                    }
                  },
                  "required": [ "success", "errorMessage" ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthorFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Jhon" ],
            "description": "First name of the Author",
            "minLength": 3,
            "maxLength": 50
          },
          "middleName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Bon" ],
            "description": "Middle name of the Author",
            "minLength": 3,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Jovi" ],
            "description": "Last name of the Author",
            "minLength": 3,
            "maxLength": 50
          },
          "biography": {
            "type": "string",
            "nullable": true,
            "examples": [ "Born in ..." ],
            "description": "Short biography of the Author",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "AuthorIM": {
        "required": [
          "biography",
          "firstName",
          "lastName",
          "middleName"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "firstName": {
            "type": "string",
            "examples": [ "Jhon" ],
            "description": "Input for the First name of the Author",
            "minLength": 3,
            "maxLength": 50
          },
          "middleName": {
            "type": "string",
            "examples": [ "Bon" ],
            "description": "Input for the Middle name of the Author",
            "minLength": 3,
            "maxLength": 40
          },
          "lastName": {
            "type": "string",
            "examples": [ "Jovi" ],
            "description": "Input for the Last name of the Author",
            "minLength": 3,
            "maxLength": 50
          },
          "biography": {
            "type": "string",
            "examples": [ "Short Bio: Lorem ipsum dolor sit amet...I" ],
            "description": "Input for the Biography of the Author",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "AuthorVideo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the connection between an Author and a Video",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "authorId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the Author",
            "minimum": 1,
            "maximum": 2147483647
          },
          "videoId": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the Video",
            "minimum": 1,
            "maximum": 2147483647
          },
          "author": {
            "$ref": "#/components/schemas/Authors"
          },
          "video": {
            "$ref": "#/components/schemas/Videos"
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Author and Video entities"
      },
      "AuthorVideoAuthorFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorVideo"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/AuthorFilterIM"
          }
        },
        "additionalProperties": false
      },
      "AuthorVideoIM": {
        "required": [
          "authorId"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "authorId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          }
        },
        "additionalProperties": false
      },
      "Authors": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Jhon" ],
            "description": "First name of the Author",
            "minLength": 1,
            "maxLength": 50
          },
          "middleName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Bon" ],
            "description": "Middle name of the Author",
            "minLength": 1,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "examples": [ "Jovi" ],
            "description": "Last name of the Author",
            "minLength": 1,
            "maxLength": 50
          },
          "biography": {
            "type": "string",
            "nullable": true,
            "examples": [ "Born in ..." ],
            "description": "Short biography of the Author",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Author entity"
      },
      "AuthorsAuthorFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authors"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/AuthorFilterIM"
          }
        },
        "additionalProperties": false
      },
      "CopyrightFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [ "Creative commons" ],
            "description": "Full name of the Copyright",
            "minLength": 3,
            "maxLength": 50
          },
          "shortName": {
            "type": "string",
            "nullable": true,
            "examples": [ "CC" ],
            "description": "Short name of the Copyright",
            "minLength": 2,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [ "Represents free use by anyone..." ],
            "description": "Description of what the Copyright is",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "Copyrights": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [ "Creative commons" ],
            "description": "Full name of the Copyright",
            "minLength": 3,
            "maxLength": 50
          },
          "shortName": {
            "type": "string",
            "nullable": true,
            "examples": [ "CC" ],
            "description": "Short name of the Copyright",
            "minLength": 2,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [ "Represents free use by anyone..." ],
            "description": "Description of what the Copyright is",
            "minLength": 3,
            "maxLength": 50
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Copyright entity"
      },
      "CopyrightsCopyrightFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Copyrights"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/CopyrightFilterIM"
          }
        },
        "additionalProperties": false
      },
      "CopyrigtIM": {
        "required": [
          "description",
          "name",
          "shortName"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "name": {
            "type": "string",
            "examples": [ "Creative Commons" ],
            "description": "Input for the Name of the Copyright",
            "minLength": 3,
            "maxLength": 50
          },
          "shortName": {
            "type": "string",
            "examples": [ "CC" ],
            "description": "Input for the Short name of the Copyright",
            "minLength": 2,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "examples": [ "Used when ..." ],
            "description": "Input for the Description of the Copyright",
            "minLength": 3,
            "maxLength": 50
          }
        },
        "additionalProperties": false
      },
      "FormatFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "extension": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 10
          },
          "isPhysical": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormatIM": {
        "required": [
          "type",
          "extension",
          "isPhysical"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "examples": [ "Web Video Format" ],
            "description": "Input for the Type of the Format",
            "minLength": 3,
            "maxLength": 50
          },
          "extension": {
            "type": "string",
            "nullable": true,
            "examples": [ ".MP4" ],
            "description": "Input for the Extension of the Format",
            "minLength": 1,
            "maxLength": 10
          },
          "isPhysical": {
            "type": "boolean",
            "description": "Input for showing if the video is on physical or electronic storage media"
          }
        },
        "additionalProperties": false
      },
      "Formats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "examples": [ "MP4" ],
            "description": "Full name of the format",
            "minLength": 3,
            "maxLength": 50
          },
          "extension": {
            "type": "string",
            "nullable": true,
            "examples": [ ".mp4" ],
            "description": "Extension of the format",
            "minLength": 1,
            "maxLength": 10
          },
          "isPhysical": {
            "type": "boolean",
            "examples": [ "false" ],
            "description": "Shows if the video is on a physical or digital media",
            "enum": [ true, false ]
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Format entity"
      },
      "FormatsFormatFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Formats"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/FormatFilterIM"
          }
        },
        "additionalProperties": false
      },
      "GenreFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false
      },
      "GenreIM": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [],
            "description": "Input for the Name of the Genre",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [],
            "description": "Input for the Description of the Genre",
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false
      },
      "GenreVideoIM": {
        "required": [
          "genreId"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "genreId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          }
        },
        "additionalProperties": false
      },
      "Genres": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [ "Romance" ],
            "description": "Name of the Genre",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [ "Contains the ..." ],
            "description": "Description of the Copyright",
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Genre entity"
      },
      "GenresGenreFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Genres"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/GenreFilterIM"
          }
        },
        "additionalProperties": false
      },
      "PagerIM": {
        "type": "object",
        "description": "Contains information used for paging",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "examples": [ 1, 2, 100 ],
            "description": "The current page number",
            "minimum": 1,
            "maximum": 2147483647
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32",
            "examples": [ 10, 20, 50 ],
            "description": "How many items are represented per 1 page",
            "minimum": 1,
            "maximum": 2147483647
          },
          "pagesCount": {
            "type": "integer",
            "format": "int32",
            "examples": [ 12, 20, 100 ],
            "description": "How many pages there are",
            "minimum": 1,
            "maximum": 2147483647
          }
        },
        "additionalProperties": false
      },
      "TagFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false
      },
      "TagIM": {
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [],
            "description": "Input for ",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [],
            "description": "",
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false
      },
      "TagVideo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          },
          "videoId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          },
          "tag": {
            "$ref": "#/components/schemas/Tags"
          },
          "video": {
            "$ref": "#/components/schemas/Videos"
          }
        },
        "additionalProperties": false,
        "description": "Information about a single connection between a Tag and Video entities"
      },
      "TagVideoGenreFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagVideo"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/GenreFilterIM"
          }
        },
        "additionalProperties": false
      },
      "TagVideoIM": {
        "required": [
          "tagId"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TagVideoTagFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagVideo"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/TagFilterIM"
          }
        },
        "additionalProperties": false
      },
      "Tags": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "examples": [ "#test" ],
            "description": "Name of the Tag",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [ "Describes..." ],
            "description": "Description of the Tag",
            "minLength": 3,
            "maxLength": 128
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Tag entity"
      },
      "TagsTagFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tags"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/TagFilterIM"
          }
        },
        "additionalProperties": false
      },
      "VideoFilterIM": {
        "type": "object",
        "description": "Contains filter and ordering information",
        "properties": {
          "orderBy": {
            "type": "string",
            "nullable": true,
            "description": "The field which will be used for ordering"
          },
          "orderDir": {
            "type": "string",
            "nullable": true,
            "enum": [ "asc", "desc" ],
            "examples": [ "asc", "desc" ],
            "description": "Use Descending or ascending order"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "fileId": {
            "type": "string",
            "nullable": true,
            "minLength": 36,
            "maxLength": 36
          },
          "size": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "yearOfPublishing": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "authorFirstName": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "authorMiddleName": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          },
          "authorLastName": {
            "type": "string",
            "nullable": true,
            "minLength": 3,
            "maxLength": 50
          }
        },
        "additionalProperties": false
      },
      "VideoIM": {
        "required": [
          "copyrightId",
          "description",
          "fileId",
          "formatId",
          "size",
          "title",
          "yearOfPublishing"
        ],
        "type": "object",
        "description": "Input data for actions that alter the database",
        "properties": {
          "title": {
            "minLength": 1,
            "maxLength": 50,
            "type": "string"
          },
          "fileId": {
            "minLength": 1,
            "type": "string"
          },
          "size": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "formatId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "yearOfPublishing": {
            "type": "string",
            "format": "date-time"
          },
          "copyrightId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Videos": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [ 123 ],
            "description": "ID of the entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is created"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Date when the entry is last updated"
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [ false ],
            "enum": [ true, false ],
            "description": "Is the entity used for business logic (Soft deleted or not)"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "examples": [ "The big bang theory" ],
            "description": "The title of the video",
            "minLength": 3,
            "maxLength": 50
          },
          "fileId": {
            "type": "string",
            "nullable": true,
            "examples": [ "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx" ],
            "description": "A UUID that is used to identify the video from the BLOB storage",
            "minLength": 36,
            "maxLength": 36
          },
          "formatId": {
            "type": "integer",
            "format": "int32",
            "examples": [ 24 ],
            "description": "ID of the format entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "format": {
            "$ref": "#/components/schemas/Formats"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "examples": [ 444 ],
            "description": "Size of the video in MB",
            "minimum": 1,
            "maximum": 2147483647
          },
          "description": {
            "type": "string",
            "nullable": true,
            "examples": [ "A short film about..." ],
            "description": "A description of the video",
            "minLength": 3,
            "maxLength": 255
          },
          "yearOfPublishing": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "examples": [ "2025-05-15T18:06:09.439Z" ],
            "description": "Year when the video was published"
          },
          "copyrightId": {
            "type": "integer",
            "format": "int32",
            "examples": [ 12 ],
            "description": "ID of the copyright entity",
            "minimum": 1,
            "maximum": 2147483647
          },
          "copyright": {
            "$ref": "#/components/schemas/Copyrights"
          }
        },
        "additionalProperties": false,
        "description": "Information about a single Video entity"
      },
      "VideosVideoFilterIMIndexIM": {
        "type": "object",
        "description": "Used as input: sends Paging and Filtering to API \n\n Used as output: returns retrieved items, Filter and paging information",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Videos"
            },
            "nullable": true
          },
          "pager": {
            "$ref": "#/components/schemas/PagerIM"
          },
          "filter": {
            "$ref": "#/components/schemas/VideoFilterIM"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "EntraID": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/authorize",
            "tokenUrl": "https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token",
            "scopes": {
              "api://your-client-id/.default": "Access the API as the signed-in user"
            }
          }
        }
      }
    },
    "security": [
      {
        "EntraID": []
      }
    ]
  }
}